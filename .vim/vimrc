" ====== vimrc by Rob Boudreau ======

    " Set font and some optionsfor GVim
if has('gui_running')
  set guifont=Iosevka\ 12
  set guioptions=m
endif

    " Call and/or install plugins with vim-plug
call plug#begin('~/.vim/plugged')

Plug 'ctrlpvim/ctrlp.vim'
" Plug 'Shougo/denite.nvim'
Plug 'scrooloose/nerdtree'
Plug 'itchyny/lightline.vim'
Plug 'taohexxx/lightline-buffer'
" Plug 'mkarmona/materialbox.git'
" Plug 'arcticicestudio/nord-vim'
Plug 'joshdick/onedark.vim'
" Plug 'lifepillar/vim-solarized8'
Plug 'lilydjwg/colorizer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'godlygeek/tabular'
Plug 'eugen0329/vim-esearch'
Plug 'majutsushi/tagbar'
Plug 'lvht/tagbar-markdown'
Plug 'ryanoasis/vim-devicons'
Plug 'plasticboy/vim-markdown'

call plug#end()

    " Enable filetype detection.
filetype plugin indent on
syntax enable

    " Set global options
set conceallevel=3
set concealcursor=nc
set termguicolors
set encoding=utf-8
set expandtab
set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set laststatus=2
set showtabline=2
set linebreak
set wildmenu
set wildmode=list:longest,full
set ttimeoutlen=50
set dir=~/Temp
set splitbelow
set splitright
set noswapfile
" syntax on
set hlsearch
set number
set relativenumber
set autoindent
" set backupdir=~/Temp
set nobackup
set nowritebackup
set noshowmode
set display=lastline
set spelllang=en_us
set spellfile=~/.config/nvim/spell/en.utf-8.add
" set foldenable

    " Settings for Vim-Markdown
let g:vim_markdown_conceal = 0
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_follow_anchor = 1
let g:vim_markdown_autowrite = 1
nno <leader>t :TableFormat<cr>

    " --{{ Settings for vim-esearch
let g:esearch = {
  \ 'adapter':    'rg',
  \ 'backend':    'system',
  \ 'out':        'qflist',
  \ 'batch_size': 1000,
  \ 'use':        ['word_under_cursor'],
  \ 'default_mappings': 1,
  \}
let g:esearch#out#win#open = 'split'
    " --}} end of settings for vim-esearch

    " This is suppose to allow file links to be opened with 'gx'
let g:netrw_browsex_viewer = "xdg-open"

    " This is supposed to allow italics in terminal
" set t_ZH=[3m
" set t_ZR=[23m

    " --{{ Settings for Lightline
let g:lightline = {
    \ 'colorscheme': 'Tomorrow_Night_Eighties',
    \ 'tabline': {
    \   'left': [ [ 'bufferinfo' ],
    \             [ 'separator' ],
    \             [ 'bufferbefore', 'buffercurrent', 'bufferafter' ], ],
    \   'right': [ [ 'close' ], ],
    \ },
    \ 'component_expand': {
    \   'buffercurrent': 'lightline#buffer#buffercurrent',
    \   'bufferbefore': 'lightline#buffer#bufferbefore',
    \   'bufferafter': 'lightline#buffer#bufferafter',
    \ },
    \ 'component_type': {
    \   'buffercurrent': 'tabsel',
    \   'bufferbefore': 'raw',
    \   'bufferafter': 'raw',
    \ },
    \ 'component_function': {
    \   'bufferinfo': 'lightline#buffer#bufferinfo',
    \ },
    \ 'component': {
    \   'separator': '',
    \ },
    \ }
    " --}} End of Lightline settings

    " Set up colorschemes
" let g:onedark_terminal_italics = 1
" let g:onedark_termcolors = 256
" let g:one_allow_italics = 1

set background=dark
" colorscheme onedark
" colorscheme one
" colorscheme solarized8
" colorscheme nord
colorscheme spacegray
" colorscheme hybrid_material
" colorscheme base16-ocean
" colorscheme materialbox

    " --{{{ Start of key mappings

    " This is to open markdown in okular
nno <silent><F9> :!okular %:p &<cr><cr>

    "Turn on and off spell checking
map <silent><F6> :set spell<cr>
map <silent><F7> :set nospell<cr>

    " These are for auto-brackets
ino " ""<ESC>i
ino { {}<ESC>i
ino [ []<ESC>i
ino ( ()<ESC>i
nno ; :

    " These keep searches centered in the page
nno n nzzzv
nno N Nzzzv

    " These increase/decrease window split sizes
nno <A-left> <c-w>>
nno <A-right> <c-w><
nno <A-up> <c-w>+
nno <A-down> <c-w>-

    " This turns off search highlighting
nno <silent><leader>\ :noh<cr>

    "Make moving back and forth in buffers easier
nno <silent><leader>[ :bp<cr>
nno <silent><leader>] :bn<cr>

    " This closes the currently viewed buffer and loads the last in the window
nno <silent><leader>c :bp\|bd #<CR>

    " This makes unrecognized code files use shell syntax highlighting
nno <F5> :set syntax=sh<cr>

    "Makes moving throught windows more sane
nno <C-j> <C-w>j
nno <C-k> <C-w>k
nno <C-h> <C-w>h
nno <C-l> <C-w>l

     " Make moving through lines normal, instead of jumping past wraps
nno <silent> <Up> gk
nno <silent> <Down> gj
nno <expr> k (v:count? 'k' : 'gk')
nno <expr> j (v:count? 'j' : 'gj')

    " Do a search through current project files for selected word
nno <leader>s :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

    " Move lines up or down using CTRL+arrow key
nno <C-down> ddp
nno <C-up> ddkP

    " Copy and paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

    " Cleans up trailing whitespace from current edit
nno <leader>w :%s/\s\+$//<cr>:let @/=''<cr>

    " Control keys for CtrlP to open it in different modes
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
nno <leader>b :CtrlPBuffer<cr>
nno <leader>p :CtrlPMRU<cr>

    " zoom a vim pane, <C-w>- to re-balance
nno <leader>+ :wincmd =<cr>:wincmd \|<cr>
nno <leader>- :wincmd =<cr>

    " Open the markdown outline
    " and put it on the left side
nno <F8> :TagbarToggle<cr>
ino <F8> :TagbarToggle<cr>
let g:tagbar_left=0

    " Snippets
nno <leader>= o==================================================<cr><ESC>

    " Save current session using existing or new name
nno <leader>q :mks! ~/.vim/sessions/
    " Load existing session
nno <leader>l :source ~/.vim/sessions/

    " Settings for NerdTree so it's more sane
nno <silent><leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeHijackNetrw=1
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
let g:NERDTreeDirArrowExpandable = 'â–¸'
let g:NERDTreeDirArrowCollapsible = 'â–¾'
nno <silent><leader>e :edit .<cr>

    " Save a admin file from regular user
nno :w!! :w !sudo tee %

    " Don't use Ex mode, use Q for formatting
map Q gq

    " automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

    " Set the file selection window to tree view
    " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
    " so that you can undo CTRL-U after inserting a line break.
ino <C-U> <C-G>u<C-U>

" }}}-- End of mappings

    " In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

    " Convenient command to see the difference between the current buffer and the
    " file it was loaded from, thus the changes you made.
    " Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
  \ | wincmd p | diffthis
endif

    " Set the directory depth for CtrlP to open
let g:ctrlp_by_filename = 1
let g:ctrlp_mac_depth = 3
let g:ctrlp_max_files = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_working_path_mode = 'w'
highlight Comment cterm=italic
