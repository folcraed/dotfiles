" vimrc by Rob Boudreau
" Last change:	2016 Dec 13

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Added this so Vim and Neovim won't have trouble with fish shell
if &shell =~# 'fish$'
    set shell=sh
endif

" Set font for GVim
if has('gui_running')
  set guifont=Hack\ 9
  set guioptions-=T
  set guioptions-=r
  set guioptions-=l
  " set guioptions-=m
  set guioptions-=b
  set guioptions-=h
endif

" Call and/or install plugins with vim-plug
call plug#begin('~/.vim/plugged')

Plug 'https://github.com/ctrlpvim/ctrlp.vim.git'
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/edkolev/tmuxline.vim.git'
Plug 'https://github.com/KabbAmine/vCoolor.vim.git'
Plug 'https://github.com/lilydjwg/colorizer'
Plug 'https://github.com/vim-airline/vim-airline.git'
Plug 'https://github.com/vim-airline/vim-airline-themes.git'
Plug 'https://github.com/tpope/vim-commentary.git'
Plug 'https://github.com/rakr/vim-one'

call plug#end()
" Start Pathogen to add plugins
" execute pathogen#infect()

set termguicolors
set expandtab
set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set laststatus=2
set linebreak
set wildmenu
set wildmode=list:longest,full
set ttimeoutlen=50
set dir=~/Temp
set splitbelow
set splitright
set noswapfile
syntax on
set hlsearch
set number
set relativenumber
set autoindent
set backupdir=~/Temp

" This is supposed to allow italics in terminal
set t_ZH=[3m
set t_ZR=[23m

" Set up Solarized or other color scheme
" let g:onedark_terminal_italics = 1
" let g:one_allow_italics = 1

set background=dark
colorscheme hybrid_material  " Set to 'solarized' if wanted and uncomment above

" nno <C-6> ddp -- these aren't working, not sure why
" nno <C-7> ddkp -- these aren't working, not sure why
ino " ""<ESC>i
ino { {}<ESC>i
ino [ []<ESC>i
ino ( ()<ESC>i
nno ; :
nno n nzzzv
nno N Nzzzv
nno <c-left> 5<c-w>>
nno <c-right> 5<c-w><
nno <silent><leader>\ :noh<cr>

"Make moving back and forth in buffers easier
nno <silent><leader>[ :bp<cr>
nno <silent><leader>] :bn<cr>

nno <F5> :set syntax=sh<cr>
"Makes moving throught windows more sane
nno <C-j> <C-w>j
nno <C-k> <C-w>k
nno <C-h> <C-w>h
nno <C-l> <C-w>l

" Do a search through current project files for selected word
nno <leader>s :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

" Move lines up or down using CTRL+arrow key
nno <C-down> ddp
nno <C-up> ddkP

" Copy and paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" Cleans up trailing whitespace from current edit
nno <leader>w :%s/\s\+$//<cr>:let @/=''<cr>

" Quick keys for turning on and off the color picker
nno <silent><leader>v :VCoolor<cr>
ino <F6> :VCoolor<cr>

" Control keys for CtrlP to open it in different modes
let g:ctrlp_map = '<leader>f'
let g:ctrlp_cmd = 'CtrlP'
nno <leader>b :CtrlPBuffer<cr>
nno <leader>p :CtrlPMRU<cr>

" zoom a vim pane, <C-w>= to re-balance
nno <leader>- :wincmd =<cr>:wincmd \|<cr>
nno <leader>= :wincmd =<cr>

  " Settings for NerdTree so it's more sane
nno <silent><leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeHijackNetrw=1
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
nno <silent><leader>e :edit .<cr>

" If using Netrw, set it's default list mode
" let g:netrw_liststyle=3

" Save a admin file from regular user
nno <silent><leader>r :w !sudo tee %

  " Don't use Ex mode, use Q for formatting
map Q gq

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

  " Set the file selection window to tree view
  " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
  " so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

  " In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

  " Enable filetype detection.
filetype plugin indent on
syntax enable

  " Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

endif " has("autocmd")

  " Convenient command to see the difference between the current buffer and the
  " file it was loaded from, thus the changes you made.
  " Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
  \ | wincmd p | diffthis
endif

  " Set the Airline to use Powerline customized fonts for extra glyphs
let g:airline_powerline_fonts=1
" the separator used on the left side
let g:airline_left_sep=''
" the separator used on the right side
let g:airline_right_sep=''
  " and set the tabline to something more useful
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline_theme='hybrid'
" let g:airline_theme='solarized'

  " Set the directory depth for CtrlP to open
let g:ctrlp_by_filename = 1
let g:ctrlp_mac_depth = 10
let g:ctrlp_max_files = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_working_path_mode = 'w'
highlight Comment cterm=italic
