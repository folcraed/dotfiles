" vimrc by Rob Boudreau
" Last change:	2016 Dec 18

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Set font and some optionsfor GVim
if has('gui_running')
  set guifont=Bitstream\ Vera\ Sans\ Mono\ 10
  set guioptions=m
endif

" Call and/or install plugins with vim-plug
call plug#begin('~/.vim/plugged')

Plug 'https://github.com/ctrlpvim/ctrlp.vim.git'
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/vim-airline/vim-airline.git'
Plug 'https://github.com/vim-airline/vim-airline-themes.git'
Plug 'https://github.com/KabbAmine/vCoolor.vim.git'
Plug 'https://github.com/lilydjwg/colorizer'
Plug 'https://github.com/tpope/vim-commentary.git'
Plug 'https://github.com/rakr/vim-one'
Plug 'https://github.com/pangloss/vim-javascript'
Plug 'https://github.com/Shougo/neocomplete.vim'
Plug 'https://github.com/SirVer/ultisnips'
Plug 'https://github.com/honza/vim-snippets'
" Plug 'https://github.com/ryanoasis/vim-devicons'
" Plug 'https://github.com/tiagofumo/vim-nerdtree-syntax-highlight'

call plug#end()

" Set global options
set termguicolors
set encoding=utf-8
set expandtab
set tabstop=4
set shiftwidth=4
set backspace=indent,eol,start
set history=50
set ruler
set showcmd
set incsearch
set laststatus=2
set linebreak
set wildmenu
set wildmode=list:longest,full
set ttimeoutlen=50
set dir=~/Temp
set splitbelow
set splitright
set noswapfile
syntax on
set hlsearch
set number
set relativenumber
set autoindent
set backupdir=~/Temp
set noshowmode

" --{{ neocomplete settings

"Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
"  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-i>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
" }}-- end of neoplete settings

" }}-- Settings for UltiSnips
" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
"
" " If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" --{{ End of UltiSnip settings

" This is supposed to allow italics in terminal
set t_ZH=[3m
set t_ZR=[23m

" Set up colorschemes
let g:onedark_terminal_italics = 1
" let g:one_allow_italics = 1

set background=dark
colorscheme onedark

" --{{{ Start of key mappings

" These are for auto-brackets
ino " ""<ESC>i
ino { {}<ESC>i
ino [ []<ESC>i
ino ( ()<ESC>i
nno ; :

" These keep searches centered in the page
nno n nzzzv
nno N Nzzzv

" These increase/decrease window split sizes
nno <c-left> 5<c-w>>
nno <c-right> 5<c-w><

" This turns off search highlighting
nno <silent><leader>\ :noh<cr>

"Make moving back and forth in buffers easier
nno <silent><leader>[ :bp<cr>
nno <silent><leader>] :bn<cr>

" This makes unrecognized code files use shell syntax highlighting
nno <F5> :set syntax=sh<cr>

"Makes moving throught windows more sane
nno <C-j> <C-w>j
nno <C-k> <C-w>k
nno <C-h> <C-w>h
nno <C-l> <C-w>l

"Make moving through lines normal, instead of jumping past wraps
nno <silent> <Up> gk
nno <silent> <Down> gj
nno <silent> k gk
nno <silent> j gj

" Do a search through current project files for selected word
nno <leader>s :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

" Move lines up or down using CTRL+arrow key
nno <C-down> ddp
nno <C-up> ddkP

" Copy and paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

" Cleans up trailing whitespace from current edit
nno <leader>w :%s/\s\+$//<cr>:let @/=''<cr>

" Quick keys for turning on and off the color picker
nno <silent><leader>v :VCoolor<cr>
ino <F6> :VCoolor<cr>

" Control keys for CtrlP to open it in different modes
let g:ctrlp_map = '<leader>f'
let g:ctrlp_cmd = 'CtrlP'
nno <leader>b :CtrlPBuffer<cr>
nno <leader>p :CtrlPMRU<cr>

" zoom a vim pane, <C-w>- to re-balance
nno <leader>+ :wincmd =<cr>:wincmd \|<cr>
nno <leader>- :wincmd =<cr>

" Snippets
nno <leader>= i=================================<cr>

" Save current session using existing or new name
nno <leader>q :mks! ~/.vim/sessions/
" Load existing session
nno <leader>l :source ~/.vim/sessions/

" Settings for NerdTree so it's more sane
nno <silent><leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeHijackNetrw=1
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
nno <silent><leader>e :edit .<cr>

" Save a admin file from regular user
nno <silent><leader>r :w !sudo tee %

  " Don't use Ex mode, use Q for formatting
map Q gq

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

  " Set the file selection window to tree view
  " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
  " so that you can undo CTRL-U after inserting a line break.
ino <C-U> <C-G>u<C-U>

" }}}-- End of mappings

  " In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

  " Enable filetype detection.
filetype plugin indent on
syntax enable

  " Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
au!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

endif " has("autocmd")

  " Convenient command to see the difference between the current buffer and the
  " file it was loaded from, thus the changes you made.
  " Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
  \ | wincmd p | diffthis
endif

" Set the Airline to use Powerline customized fonts for extra glyphs
let g:airline_powerline_fonts=1
" the separator used on the left side
let g:airline_left_sep=''
" the separator used on the right side
let g:airline_right_sep=''
" set the bufferline to something more useful
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#show_splits = 0
" let g:airline#extensions#tabline#show_tab_nr = 1
" let g:airline#extensions#tabline#tab_nr_type = 2
let g:airline_theme='one'

  " Set the directory depth for CtrlP to open
let g:ctrlp_by_filename = 1
let g:ctrlp_mac_depth = 3
let g:ctrlp_max_files = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_working_path_mode = 'w'
highlight Comment cterm=italic
